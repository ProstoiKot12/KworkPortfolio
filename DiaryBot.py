
from aiogram import Bot, Dispatcher, executor, types
import config
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
TOKEN = 'token'

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


ras = KeyboardButton('üìù –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
els = InlineKeyboardButton('–ù–∞–∂–º–∏ —Å—é–¥–∞', url='https://elschool.ru/Logon/Index')
el = KeyboardButton('üìñ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫')
sr_bal = KeyboardButton('üî¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª')

but1 = KeyboardButton('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ')
but2 = KeyboardButton('–í—Ç–æ—Ä–Ω–∏–∫ ')
but3 = KeyboardButton('–°—Ä–µ–¥–∞ ')
but4 = KeyboardButton('–ß–µ—Ç–≤–µ—Ä–≥ ')
but5 = KeyboardButton('–ü—è—Ç–Ω–∏—Ü–∞ ')
but6 = KeyboardButton('–°—É–±–±–æ—Ç–∞ ')

kb1 = ReplyKeyboardMarkup(resize_keyboard=True)
kb1.row(but1, but4)
kb1.add(but2, but5)
kb1.add(but3, but6)

kb2 = ReplyKeyboardMarkup(resize_keyboard=True)
kb2.add(ras, el, sr_bal)

kb3 = InlineKeyboardMarkup()
kb3.add(els)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} —è –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫, —Ç—ã –º–æ–∂–µ—à—å –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é /menu", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(commands=['menu'])
async def send_menu(message: types.Message):
    await message.answer('–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ —Ç–æ —á—Ç–æ —Ç–µ–±–µ –Ω–∞–¥–æ', reply_markup=kb2)

@dp.message_handler(text= '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
async def send_welcome(message: types.Message):
    await message.answer('–í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∂–∞—Å–Ω—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n'
                                          "\n"
                                        "1	–ò–∑–æ\n"
                                        "2	–ê–Ω–≥–ª —è–∑\n"
                                        "3	–§–∏–∑—Ä–∞\n"
                                        "4	–ê–ª–≥–µ–±—Ä–∞\n"
                                        "5	–ò–∫—Ç\n"
                                        "6	–†—É—Å —è–∑\n"
                                        "7	–î–æ–ø. –º–∞—Ç–µ–º\n ")

@dp.message_handler(text= '–í—Ç–æ—Ä–Ω–∏–∫')
async def send_welcome(message: types.Message):
    await message.answer('–í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–∞–∫–æ–π —Å–µ–±–µ –≤—Ç–æ—Ä–Ω–∏–∫:\n'
                                          "\n"
                                        "1	–ò—Å—Ç—Ä–æ–∏—è\n"
                                        "2	–§–∏–∑—Ä–∞\n"
                                        "3	–•–∏–º–∏—è\n"
                                        "4	–ù–µ–º–µ—Ü–∫–∏–π\n"
                                        "5	–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞\n"
                                        "6	–ì–µ–æ–º–µ—Ç—Ä–∏—è\n"
                                        "7	–ö–ª —á–∞—Å\n ")

@dp.message_handler(text= '–°—Ä–µ–¥–∞')
async def send_welcome(message: types.Message):
    await message.answer('–í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—Ä–µ–¥–Ω–∏—é —Å—Ä–µ–¥—É:\n'
                                          "\n"
                                        "1	–§–∏–∑–∏–∫–∞\n"
                                        "2	–ê–Ω–≥–ª —è–∑\n"
                                        "3	–ë–∏–æ–ª–æ–≥–∏—è\n"
                                        "4	–†—É—Å —è–∑\n"
                                        "5	–ê–ª–≥–µ–±—Ä–∞\n"
                                        "6	–ì–µ–æ–≥—Ä–∞—Ñ–∏—è\n")

@dp.message_handler(text= '–ß–µ—Ç–≤–µ—Ä–≥')
async def send_welcome(message: types.Message):
    await message.answer('–í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–æ–∂–Ω–∏–π —á–µ—Ç–≤–µ—Ä–≥:\n'
                                        "\n"
                                        "1	–õ–∏—Ç–µ—Ä\n"
                                        "2	–ë–∏–æ–ª–æ–≥–∏—è\n"
                                        "3	–†—É—Å —è–∑\n"
                                        "4	–ì–µ–æ–º–µ—Ç—Ä–∏—è\n"
                                        "5	–•–∏–º–∏—è\n"
                                        "6	–û–±—â–µ—Å—Ç–≤–æ\n  ")

@dp.message_handler(text= '–ü—è—Ç–Ω–∏—Ü–∞')
async def send_welcome(message: types.Message):
    await message.answer('–í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Ç–ª–∏—á–Ω—É—é –ø—è—Ç–Ω–∏—Ü—É:\n'
                                          "\n"
                                        "1	–ê–ª–≥–µ–±—Ä–∞\n"
                                        "2	–†—É—Å —è–∑\n"
                                        "3	–†–æ–¥–Ω–æ–π\n"
                                        "4	–ë–∞—à/–ò–ö–ë\n"
                                        "5	–û–ë–ñ\n"
                                        "6	–ò—Å—Ç–æ—Ä–∏—è\n"
                                        "7	–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è\n ")

@dp.message_handler(text= '–°—É–±–±–æ—Ç–∞')
async def send_welcome(message: types.Message):
    await message.answer('–í —Å—É–±–±–æ—Ç—É –≤—ã—Ö–æ–¥–Ω–æ–π —Ç–∞–∫ —á—Ç–æ, –æ—Ç–¥—ã—Ö–∞–π')

@dp.message_handler(text= '–°–ø–∞—Å–∏–±–æ')
async def send_welcome(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Ö–æ–¥–∏ –µ—â–µ')

@dp.message_handler(text= '–°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ')
async def send_welcome(message: types.Message):
    await message.answer('–≠—Ç–æ —Ç–µ–±–µ —Å–ø–∞—Å–∏–±–æ, –ø—Ä–∏—Ö–æ–¥–∏ –µ—â–µ')

@dp.message_handler(text= 'üìñ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫')
async def send_welcome(message: types.Message):
    await message.reply('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫', reply_markup=kb3)

@dp.message_handler(text= 'üìù –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def send_welcome(message: types.Message):
    await message.reply("–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏", reply_markup=kb1)

@dp.message_handler(commands=['rm'])
async def process_rm_command(message: types.Message):
    await message.reply("–£–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π", reply_markup=ReplyKeyboardRemove())

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
